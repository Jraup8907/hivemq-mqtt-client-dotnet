"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[553],{7737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(5893),s=t(1151);const r={sidebar_position:2},o="Usage Examples",c={id:"events/Examples",title:"Usage Examples",description:"The following serves as a few examples on how to utilize the built in event system.",source:"@site/docs/events/Examples.md",sourceDirName:"events",slug:"/events/Examples",permalink:"/hivemq-mqtt-client-dotnet/docs/events/Examples",draft:!1,unlisted:!1,editUrl:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Documentation/docs/events/Examples.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Reference",permalink:"/hivemq-mqtt-client-dotnet/docs/events/Reference"},next:{title:"How To Guides",permalink:"/hivemq-mqtt-client-dotnet/docs/category/how-to-guides"}},a={},l=[{value:"Display Options Prior to Connecting",id:"display-options-prior-to-connecting",level:2},{value:"Taking Action After a Subscribe",id:"taking-action-after-a-subscribe",level:2},{value:"Monitoring outgoing Publish Packets",id:"monitoring-outgoing-publish-packets",level:2},{value:"Monitoring Subscribe Response Packets (SUBACK)",id:"monitoring-subscribe-response-packets-suback",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:"The following serves as a few examples on how to utilize the built in event system."}),"\n",(0,i.jsx)(n.h2,{id:"display-options-prior-to-connecting",children:"Display Options Prior to Connecting"}),"\n",(0,i.jsxs)(n.p,{children:["This example simply prints out the ",(0,i.jsx)(n.code,{children:"HiveMQClientOptions"})," prior to the connect command being sent to the broker."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void BeforeConnectHandler(object? sender, BeforeConnectEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n        Console.WriteLine("Connecting to Broker with the Options: {}", eventArgs.Options)\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\n\nclient.BeforeConnect += BeforeConnectHandler;\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"taking-action-after-a-subscribe",children:"Taking Action After a Subscribe"}),"\n",(0,i.jsx)(n.p,{children:"Suppose you wanted to take some global action after every subscribe call made by the client.  This example\nillustrates the steps required."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void AfterSubscribeHandler(object? sender, AfterSubscribeEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The result of the subscribe call\n        // eventArgs.SubcribeResult\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\n\nclient.BeforeConnect += BeforeConnectHandler;\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\nvar subscribeResult = await client.SubscribeAsync("district/9/level", MQTT5.Types.QualityOfService.ExactlyOnceDelivery).ConfigureAwait(false);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-outgoing-publish-packets",children:"Monitoring outgoing Publish Packets"}),"\n",(0,i.jsx)(n.p,{children:"The following can be used to monitor when publish packets are transmitted from the client.  A potential debug vector in application development."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void OnPublishSentHandler(object? sender, OnPublishSentEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The transmitted MQTT Publish packet\n        // eventArgs.PublishPacket\n\n        // and the MQTT5PublishMessage\n        // eventArgs.PublishPacket.Message\n\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n\nclient.OnPublishSent += OnPublishSentHandler;\n\nvar result = await client.PublishAsync("district/7/count", "82", MQTT5.Types.QualityOfService.AtLeastOnceDelivery).ConfigureAwait(false);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-subscribe-response-packets-suback",children:"Monitoring Subscribe Response Packets (SUBACK)"}),"\n",(0,i.jsx)(n.p,{children:"The following can be used to monitor SubAck responses from the broker"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using HiveMQtt.Client.Events;\n\nprivate static void OnSubAckReceivedHandler(object? sender, OnSubAckReceivedEventArgs eventArgs)\n{\n    if (sender is not null)\n    {\n        var client = (HiveMQClient)sender;\n\n        // The received SubAck packet\n        // eventArgs.SubAckPacket\n    }\n}\n\n// Later...\n\nvar client = new HiveMQClient();\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\nvar subResult = await client.SubscribeAsync("district/9/level", MQTT5.Types.QualityOfService.ExactlyOnceDelivery).ConfigureAwait(false);\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var i=t(7294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);