"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[651],{9759:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var t=n(5893),s=n(1151);const r={sidebar_position:2},l="Quickstart",o={id:"quickstart",title:"Quickstart",description:"Install",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/hivemq-mqtt-client-dotnet/docs/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Documentation/docs/quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"The MQTT Client",permalink:"/hivemq-mqtt-client-dotnet/docs/intro"},next:{title:"Lifecycle Events",permalink:"/hivemq-mqtt-client-dotnet/docs/category/lifecycle-events"}},c={},a=[{value:"Install",id:"install",level:2},{value:"Overview",id:"overview",level:2},{value:"Common Usage: Complete Example",id:"common-usage-complete-example",level:2},{value:"Connecting",id:"connecting",level:2},{value:"with Defaults",id:"with-defaults",level:3},{value:"With Options",id:"with-options",level:3},{value:"Reference",id:"reference",level:3},{value:"Subscribing",id:"subscribing",level:2},{value:"Simple",id:"simple",level:3},{value:"With Options",id:"with-options-1",level:3},{value:"Reference",id:"reference-1",level:3},{value:"Publishing",id:"publishing",level:2},{value:"Simple",id:"simple-1",level:3},{value:"With Options",id:"with-options-2",level:3},{value:"Reference",id:"reference-2",level:3}];function h(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"quickstart",children:"Quickstart"}),"\n",(0,t.jsx)(i.h2,{id:"install",children:"Install"}),"\n",(0,t.jsxs)(i.p,{children:["This package is ",(0,t.jsx)(i.a,{href:"https://www.nuget.org/packages/HiveMQtt/",children:"available on NuGet.org"})," and can be installed with:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-sh",children:"dotnet add package HiveMQtt\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This client is 100% open-source.  Find the source code in the ",(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet",children:"Github repository"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(i.p,{children:"This C# client provides a user-friendly builder pattern interface for simplified usage."}),"\n",(0,t.jsx)(i.p,{children:"The following table serves as a handy reference for the most frequently utilized classes within the library:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Description"}),(0,t.jsx)(i.th,{children:"Core Class"}),(0,t.jsx)(i.th,{children:"Builder Class"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"The Client"}),(0,t.jsxs)(i.td,{children:[(0,t.jsx)(i.code,{children:"HiveMQClient"})," (",(0,t.jsx)(i.a,{href:"/docs/quickstart#hivemqclient-connect-with-defaults",children:"Docs"}),", ",(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/tree/main/Source/HiveMQtt/Client",children:"Source"}),")"]}),(0,t.jsx)(i.td,{children:"None"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Client Options"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/Client/Options/HiveMQClientOptions.cs",children:(0,t.jsx)(i.code,{children:"HiveMQClientOptions"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/Client/HiveMQClientOptionsBuilder.cs",children:(0,t.jsx)(i.code,{children:"HiveMQClientOptionsBuilder"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Subscribe Options"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/Client/Options/SubscribeOptions.cs",children:(0,t.jsx)(i.code,{children:"SubscribeOptions"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/builder/Source/HiveMQtt/Client/SubscribeOptionsBuilder.cs",children:(0,t.jsx)(i.code,{children:"SubscribeOptionsBuilder"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Unsubscribe Options"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/Client/Options/UnsubscribeOptions.cs",children:(0,t.jsx)(i.code,{children:"UnsubscribeOptions"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/builder/Source/HiveMQtt/Client/UnsubscribeOptionsBuilder.cs",children:(0,t.jsx)(i.code,{children:"UnsubscribeOptionsBuilder"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"An Application Message"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/MQTT5/Types/MQTT5PublishMessage.cs",children:(0,t.jsx)(i.code,{children:"MQTT5PublishMessage"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.a,{href:"https://github.com/hivemq/hivemq-mqtt-client-dotnet/blob/main/Source/HiveMQtt/Client/PublishMessageBuilder.cs",children:(0,t.jsx)(i.code,{children:"PublishMessageBuilder"})})})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"common-usage-complete-example",children:"Common Usage: Complete Example"}),"\n",(0,t.jsx)(i.p,{children:"The example presented below illustrates the prevalent usage pattern for our client, offering a solid foundation from which you can build upon. This serves as a practical starting point, showcasing the most common workflows to guide and assist you in efficiently implementing and customizing the client based on your specific needs."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using HiveMQtt.Client;\nusing HiveMQtt.MQTT5.Types; // For QualityOfService enum\n\nvar options = new HiveMQClientOptionsBuilder().\n                    WithBroker(\'candy.x39.eu.hivemq.cloud\').\n                    WithPort(8883).\n                    WithUseTLS(true).\n                    Build();\n\n// Instantiate the HiveMQtt client\nvar client = new HiveMQClient(options);\n\n// Setup application message handlers FIRST\nclient.OnMessageReceived += (sender, args) =>\n{\n    Console.WriteLine("Message Received: {}", args.PublishMessage.PayloadAsString)\n};\n\n// Connect\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n\n// Create subscribe options for topics we want to subscribe to\nvar builder = new SubscribeOptionsBuilder();\nbuilder.WithSubscription("topic1", QualityOfService.AtLeastOnceDelivery)\n       .WithSubscription("topic2", QualityOfService.ExactlyOnceDelivery);\nvar subscribeOptions = builder.Build();\n\n// Subscribe\nvar subscribeResult = await client.SubscribeAsync(subscribeOptions);\n\n// Publish\nvar publishResult = await client.PublishAsync("topic1/example", "Hello Payload")\n'})}),"\n",(0,t.jsx)(i.h2,{id:"connecting",children:"Connecting"}),"\n",(0,t.jsx)(i.h3,{id:"with-defaults",children:"with Defaults"}),"\n",(0,t.jsxs)(i.p,{children:["Without any options given, the ",(0,t.jsx)(i.code,{children:"HiveMQClient"})," will search on ",(0,t.jsx)(i.code,{children:"localhost"})," port 1883 for an unsecured broker."]}),"\n",(0,t.jsx)(i.p,{children:"If you don't have a broker at this location, see the next sections."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"using HiveMQtt.Client;\n\n// Connect\nvar client = new HiveMQClient();\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n"})}),"\n",(0,t.jsx)(i.h3,{id:"with-options",children:"With Options"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"HiveMQClientOptions"})," class provides a set of options that can be used to configure various aspects of the ",(0,t.jsx)(i.code,{children:"HiveMQClient"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["The easiest way to construct this class is to use ",(0,t.jsx)(i.code,{children:"HiveMQClientOptionsBuilder"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"var options = new HiveMQClientOptionsBuilder().\n                    WithBroker('candy.x39.eu.hivemq.cloud').\n                    WithPort(8883).\n                    WithUseTLS(true).\n                    Build();\n\nvar client = new HiveMQClient(options);\nvar connectResult = await client.ConnectAsync().ConfigureAwait(false);\n"})}),"\n",(0,t.jsx)(i.h3,{id:"reference",children:"Reference"}),"\n",(0,t.jsxs)(i.p,{children:["To illustrate ",(0,t.jsx)(i.em,{children:"each and every possible call"})," with ",(0,t.jsx)(i.code,{children:"HiveMQClientOptionsBuilder"}),", see the following example:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using HiveMQtt.MQTT5.Types; // For QualityOfService enum\n\nvar options = new HiveMQClientOptionsBuilder()\n    .WithBroker("broker.hivemq.com")\n    .WithPort(1883)\n    .WithClientId("myClientId")\n    .WithAllowInvalidBrokerCertificates(true)\n    .WithUseTls(true)\n    .WithCleanStart(true)\n    .WithKeepAlive(60)\n    .WithAuthenticationMethod("UsernamePassword")\n    .WithAuthenticationData(Encoding.UTF8.GetBytes("authenticationData"))\n    .WithUserProperty("property1", "value1")\n    .WithUserProperties(new Dictionary<string, string> { { "property1", "value1" }, { "property2", "value2" } })\n    .WithLastWill(new LastWillAndTestament {\n                            Topic = "lwt/topic",\n                            PayloadAsString = "LWT message",\n                            QoS = QualityOfService.AtLeastOnceDelivery,\n                            Retain = true })\n    .WithMaximumPacketSize(1024)\n    .WithReceiveMaximum(100)\n    .WithSessionExpiryInterval(3600)\n    .WithUserName("myUserName")\n    .WithPassword("myPassword")\n    .WithPreferIPv6(true)\n    .WithTopicAliasMaximum(10)\n    .WithRequestProblemInformation(true)\n    .WithRequestResponseInformation(true)\n    .Build();\n'})}),"\n",(0,t.jsx)(i.h2,{id:"subscribing",children:"Subscribing"}),"\n",(0,t.jsx)(i.p,{children:'In MQTT, "subscribe" is an operation that allows an MQTT client to request to receive messages published to specific topics from an MQTT broker.'}),"\n",(0,t.jsx)(i.h3,{id:"simple",children:"Simple"}),"\n",(0,t.jsx)(i.p,{children:"Use the SubscribeAsync method to subscribe to the desired topic by providing the topic string as a parameter."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'await client.SubscribeAsync("instrument/x9284/boston").ConfigureAwait(false);\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Optionally, you can specify the desired quality of service (QoS) level for the subscription. By default, the QoS level is set to ",(0,t.jsx)(i.code,{children:"QualityOfServiceLevel.AtMostOnce"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using HiveMQtt.MQTT5.Types; // For QualityOfService enum\n\nstring topic = "my/topic";\nQualityOfService qos = QualityOfService.AtLeastOnceDelivery;\n\nawait client.SubscribeAsync(topic, qosLevel);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"with-options-1",children:"With Options"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"SubscribeOptionsBuilder"})," class provides a convenient way to construct subscription options for MQTT subscriptions. It allows you to configure various aspects of the subscription(s), including the topic filter, quality of service (QoS) level, user properties, and more."]}),"\n",(0,t.jsx)(i.p,{children:"To use the SubscribeOptionsBuilder:"}),"\n",(0,t.jsx)(i.p,{children:"Create an instance of the SubscribeOptionsBuilder class."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"var builder = new SubscribeOptionsBuilder();\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Use the ",(0,t.jsx)(i.code,{children:"WithSubscription"})," method to specify the topic filter and QoS level for the subscription. This method can be called multiple times to create multiple subscriptions at once."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'builder.WithSubscription("topic1", QualityOfService.AtLeastOnceDelivery)\n       .WithSubscription("topic2", QualityOfService.ExactlyOnceDelivery);\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Optionally, you can use the ",(0,t.jsx)(i.code,{children:"WithUserProperties"})," method to add custom user properties to the subscription. User properties are key-value pairs that provide additional metadata or application-specific information."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'var userProperties = new Dictionary<string, string>\n{\n    { "property1", "value1" },\n    { "property2", "value2" }\n};\n\nbuilder.WithUserProperties(userProperties);\n'})}),"\n",(0,t.jsxs)(i.p,{children:["There also exists a singular ",(0,t.jsx)(i.code,{children:"WithUserProperty"})," if you just need to send one key-value pair:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'builder.WithUserProperty("property1", "value1")\n'})}),"\n",(0,t.jsx)(i.p,{children:"Call the Build method to create the SubscribeOptions object."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"var options = builder.Build();\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Use the created ",(0,t.jsx)(i.code,{children:"SubscribeOptions"})," object when subscribing to MQTT topics using the MQTT client library."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"await client.SubscribeAsync(options);\n"})}),"\n",(0,t.jsxs)(i.p,{children:["By using the ",(0,t.jsx)(i.code,{children:"SubscribeOptionsBuilder"}),", you can easily configure multiple subscriptions with different topic filters and QoS levels. Additionally, you have the flexibility to include custom user properties to provide additional information or metadata for the subscriptions."]}),"\n",(0,t.jsx)(i.h3,{id:"reference-1",children:"Reference"}),"\n",(0,t.jsxs)(i.p,{children:["To illustrate ",(0,t.jsx)(i.em,{children:"each and every possible call"})," with ",(0,t.jsx)(i.code,{children:"SubscribeOptionsBuilder"}),", see the following example:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using HiveMQtt.MQTT5.Types;\n\nvar options = new SubscribeOptionsBuilder().\n                    .WithSubscription(\n                        "topic1",                             // Topic\n                        QualityOfService.ExactlyOnceDelivery, // Quality of Service Level\n                        true,                                 // NoLocal\n                        true,                                 // RetainAsPublished\n                        RetainHandling.SendAtSubscribe        // RetainHandling\n                    ).\n                    WithUserProperty("property1", "value1").\n                    WithUserProperties(\n                        new Dictionary<string, string> {\n                            { "property1", "value1" }, { "property2", "value2" } }).\n                    Build();\n\n'})}),"\n",(0,t.jsxs)(i.p,{children:["In ",(0,t.jsx)(i.code,{children:"WithSubscription"}),", the first two arguments are required.  The additional optional parameters are defined as:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"NoLocal: The NoLocal option, when set to true, indicates that the subscriber does not want to receive messages published by itself. This option is useful in scenarios where a client is publishing and subscribing to the same topic. By setting NoLocal to true, the client can avoid receiving its own published messages."}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"RetainAsPublished: The RetainAsPublished option, when set to false, indicates that the broker should not send retained messages to the subscriber when it first subscribes to a topic. Retained messages are those that are stored by the broker and sent to new subscribers upon subscription. By setting RetainAsPublished to false, the subscriber will not receive any retained messages for that topic."}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Retain handling: Retain handling refers to the behavior of the broker when it receives a subscription request for a topic that has retained messages. In MQTT 5, there are three options for retain handling:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"RetainHandling.SendAtSubscribe"}),": The broker sends any retained messages for the topic to the subscriber immediately upon subscription."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"RetainHandling.SendAtSubscribeIfNewSubscription"}),": The broker sends retained messages to new subscribers only if there are no existing subscriptions for that topic."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"RetainHandling.DoNotSendAtSubscribe"}),": The broker does not send any retained messages to the subscriber upon subscription."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"These options provide flexibility and control over the behavior of the subscription process in MQTT 5, allowing subscribers to customize their experience based on their specific requirements."}),"\n",(0,t.jsx)(i.h2,{id:"publishing",children:"Publishing"}),"\n",(0,t.jsx)(i.p,{children:'In MQTT, "publish" is an operation that allows an MQTT client to send a message to an MQTT broker, which then distributes the message to all subscribed clients interested in the topic of the message.'}),"\n",(0,t.jsx)(i.h3,{id:"simple-1",children:"Simple"}),"\n",(0,t.jsx)(i.p,{children:"Use the PublishAsync method to publish a payload to the desired topic by providing the topic string and payload as parameters."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'var publishResult = await client.PublishAsync("topic1/example", "Hello Payload")\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Optionally, you can specify the desired quality of service (QoS) level for the publish. By default, the QoS level is set to ",(0,t.jsx)(i.code,{children:"QualityOfService.AtMostOnceDelivery"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using HiveMQtt.MQTT5.Types; // For the QualityOfService enum\n\nvar publishResult = await client.PublishAsync("topic1/example", "Hello Payload", QualityOfService.ExactlyOnceDelivery)\n'})}),"\n",(0,t.jsx)(i.h3,{id:"with-options-2",children:"With Options"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"PublishMessageBuilder"})," class provides a convenient way to construct MQTT publish messages with various options and properties. It allows you to customize the topic, payload, quality of service (QoS) level, retain flag, and other attributes of the message."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'var publishMessage = new PublishMessageBuilder().\n                            WithTopic("topic1/example").\n                            WithPayload("{\'HiveMQ\': \'\ud83d\udc4d\'}").\n                            WithContentType("application/json")\n                            WithResponseTopic("response/topic")\n                            Build();\n\nawait client.PublishAsync(publishMessage).ConfigureAwait(false);\n'})}),"\n",(0,t.jsxs)(i.p,{children:["By using ",(0,t.jsx)(i.code,{children:"PublishMessageBuilder"}),", you can easily construct MQTT publish messages with the desired properties and options. It provides a fluent and intuitive way to customize the topic, payload, QoS level, retain flag, and other attributes of the message."]}),"\n",(0,t.jsx)(i.h3,{id:"reference-2",children:"Reference"}),"\n",(0,t.jsxs)(i.p,{children:["To illustrate ",(0,t.jsx)(i.em,{children:"each and every possible call"})," with ",(0,t.jsx)(i.code,{children:"PublishMessageBuilder"}),", see the following example:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'var publishMessage = new PublishMessageBuilder()\n    .WithTopic("topic1/example")\n    .WithPayload("Hello, HiveMQtt!")\n    .WithQualityOfServiceLevel(QualityOfService.AtLeastOnceDelivery)\n    .WithRetainFlag(true)\n    .WithPayloadFormatIndicator(MQTT5PayloadFormatIndicator.UTF8Encoded)\n    .WithContentType("application/json")\n    .WithResponseTopic("response/topic")\n    .WithCorrelationData(Encoding.UTF8.GetBytes("correlation-data"))\n    .WithUserProperty("property1", "value1")\n    .WithUserProperties(new Dictionary<string, string> { { "property1", "value1" }, { "property2", "value2" } });\n    .WithMessageExpiryInterval(3600)\n    .WithSubscriptionIdentifier(123)\n    .WithSubscriptionIdentifiers(1, 2, 3)\n    .WithTopicAlias(456)\n    .WithContentTypeAlias(789)\n    .WithResponseTopicAlias(987)\n    .Build()\n'})})]})}function d(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>l});var t=n(7294);const s={},r=t.createContext(s);function l(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);